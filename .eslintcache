[{"/Users/julianklummer/WebProjects/personal-portfolio/src/index.tsx":"1","/Users/julianklummer/WebProjects/personal-portfolio/src/domain/navbar/Navbar.tsx":"2","/Users/julianklummer/WebProjects/personal-portfolio/src/languages/LanguageHelper.tsx":"3","/Users/julianklummer/WebProjects/personal-portfolio/src/contexts/LanguageContext.tsx":"4","/Users/julianklummer/WebProjects/personal-portfolio/src/components/ContactButton.tsx":"5","/Users/julianklummer/WebProjects/personal-portfolio/src/components/SkillCard.tsx":"6","/Users/julianklummer/WebProjects/personal-portfolio/src/App.tsx":"7","/Users/julianklummer/WebProjects/personal-portfolio/src/languages/Language.tsx":"8","/Users/julianklummer/WebProjects/personal-portfolio/src/themes/Theme.tsx":"9","/Users/julianklummer/WebProjects/personal-portfolio/src/domain/skills/Skills.tsx":"10","/Users/julianklummer/WebProjects/personal-portfolio/src/domain/bottomnav/BottomNav.tsx":"11","/Users/julianklummer/WebProjects/personal-portfolio/src/themes/ThemeHelper.tsx":"12","/Users/julianklummer/WebProjects/personal-portfolio/src/domain/start/Start.tsx":"13"},{"size":658,"mtime":1608559114265,"results":"14","hashOfConfig":"15"},{"size":6133,"mtime":1609533931385,"results":"16","hashOfConfig":"15"},{"size":633,"mtime":1609532223106,"results":"17","hashOfConfig":"15"},{"size":1615,"mtime":1609531669749,"results":"18","hashOfConfig":"15"},{"size":496,"mtime":1609263869888,"results":"19","hashOfConfig":"15"},{"size":2767,"mtime":1609531501994,"results":"20","hashOfConfig":"15"},{"size":4373,"mtime":1609533892884,"results":"21","hashOfConfig":"15"},{"size":2603,"mtime":1609531730434,"results":"22","hashOfConfig":"15"},{"size":2151,"mtime":1609017497839,"results":"23","hashOfConfig":"15"},{"size":1480,"mtime":1609532568222,"results":"24","hashOfConfig":"15"},{"size":821,"mtime":1609261485110,"results":"25","hashOfConfig":"15"},{"size":1653,"mtime":1608543550182,"results":"26","hashOfConfig":"15"},{"size":2352,"mtime":1609532371085,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1anzr79",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/julianklummer/WebProjects/personal-portfolio/src/index.tsx",["57"],"/Users/julianklummer/WebProjects/personal-portfolio/src/domain/navbar/Navbar.tsx",["58"],"/Users/julianklummer/WebProjects/personal-portfolio/src/languages/LanguageHelper.tsx",["59","60","61"],"/Users/julianklummer/WebProjects/personal-portfolio/src/contexts/LanguageContext.tsx",["62"],"/Users/julianklummer/WebProjects/personal-portfolio/src/components/ContactButton.tsx",[],"/Users/julianklummer/WebProjects/personal-portfolio/src/components/SkillCard.tsx",["63","64","65"],"import React, { useContext } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\nimport { LanguageContext } from '../contexts/LanguageContext';\n\nconst Checked: React.FC = () => {\n  return <Brightness1Icon color=\"primary\" />;\n}\n\nconst Unchecked: React.FC = () => {\n  return <RadioButtonUncheckedIcon color=\"primary\" />;\n}\n\ninterface SkillCard {\n  skill: 'one' | 'two' | 'three'\n}\n\ninterface Data {\n  title: string,\n  skills: string[],\n  levels: number[]\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      maxWidth: 752,\n    }\n  }),\n);\n\nexport const SkillCard: React.FC<SkillCard> = (props) => {\n  const classes = useStyles();\n\n  const languageContext = useContext(LanguageContext);\n\n  let data: Data;\n  switch (props.skill) {\n    case \"one\":\n      data = languageContext?.dictionary.skills.skillCards.one!;\n      break;\n    case \"two\":\n      data = languageContext?.dictionary.skills.skillCards.two!;\n      break;\n    case \"three\":\n      data = languageContext?.dictionary.skills.skillCards.three!;\n      break;\n  }\n\n  const title = data.title;\n\n  const generateLevel = (key: number) => {\n\n    const levelDisplay = [];\n\n    for (let i = 0; i <= 4; i++) {\n      if (i < data.levels[key]) {\n        levelDisplay[i] = <Brightness1Icon color=\"primary\" />;\n      } else {\n        levelDisplay[i] = <RadioButtonUncheckedIcon color=\"primary\" />;\n      }\n    }\n\n    return levelDisplay;\n  }\n\n  const generateDivider = (key: number) => {\n    if((key + 1) < data.skills.length){\n      return (<Divider />);\n    } else {\n      return null;\n    }\n  }\n\n  const generateSkill = () => {\n    return data.skills.map((value) =>\n      <React.Fragment>\n        <ListItem>\n          <ListItemText\n            primary={value}\n          />\n          {generateLevel(data.skills.indexOf(value))}\n        </ListItem>\n        {generateDivider(data.skills.indexOf(value))}\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Paper elevation={3}>\n        <Box pt={2}>\n          <Typography variant=\"h4\" component=\"h3\" align=\"center\">\n            {title}\n          </Typography>\n        </Box>\n        <List>\n          {generateSkill()}\n        </List>\n      </Paper>\n    </div>\n  );\n}","/Users/julianklummer/WebProjects/personal-portfolio/src/App.tsx",["66","67"],"/Users/julianklummer/WebProjects/personal-portfolio/src/languages/Language.tsx",["68","69"],"import en from './en.json';\nimport de from './de.json';\n\ninterface dictionaryList {\n  en: {\n    \"contactButton\": string,\n    \"start\": {\n      \"title\": string,\n      \"headline\": string,\n      \"description\": string\n    },\n    \"about\": {\n      \"title\": string,\n      \"description\": string,\n      \"stations\": {\n        \"titles\": string[],\n        \"companies\": string[],\n        \"durations\": string[],\n        \"locations\": string[],\n        \"icons\": string[],\n        \"link\": string[],\n        \"infos\": string[]\n      }\n    },\n    \"skills\": {\n      \"title\": string,\n      \"skillCards\": {\n        \"one\": {\n          \"title\": string,\n          \"skills\": string[],\n          \"levels\": number[]\n        },\n        \"two\": {\n          \"title\": string,\n          \"skills\": string[],\n          \"levels\": number[]\n        },\n        \"three\": {\n          \"title\": string,\n          \"skills\": string[],\n          \"levels\": number[]\n        }\n      }\n    },\n    \"portfolio\": {\n      \"title\": string,\n      \"projects\": {\n        \"titles\": string[],\n        \"descriptions\": string[],\n        \"liveLinks\": string[],\n        \"githubLinks\": string[]\n      }\n    },\n    \"contact\": {\n      \"title\": string,\n      \"mail\": string,\n      \"telephone\": string\n    },\n    \"legal notice\": {\n      \"title\": string,\n      \"information\": string\n    }\n  },\n  de: {\n    \"contactButton\": string,\n    \"start\": {\n      \"title\": string,\n      \"headline\": string,\n      \"description\": string\n    },\n    \"about\": {\n      \"title\": string,\n      \"description\": string,\n      \"stations\": {\n        \"titles\": string[],\n        \"companies\": string[],\n        \"durations\": string[],\n        \"locations\": string[],\n        \"icons\": string[],\n        \"link\": string[],\n        \"infos\": string[]\n      }\n    },\n    \"skills\": {\n      \"title\": string,\n      \"skillCards\": {\n        \"one\": {\n          \"title\": string,\n          \"skills\": string[],\n          \"levels\": number[]\n        },\n        \"two\": {\n          \"title\": string,\n          \"skills\": string[],\n          \"levels\": number[]\n        },\n        \"three\": {\n          \"title\": string,\n          \"skills\": string[],\n          \"levels\": number[]\n        }\n      }\n    },\n    \"portfolio\": {\n      \"title\": string,\n      \"projects\": {\n        \"titles\": string[],\n        \"descriptions\": string[],\n        \"liveLinks\": string[],\n        \"githubLinks\": string[]\n      }\n    },\n    \"contact\": {\n      \"title\": string,\n      \"mail\": string,\n      \"telephone\": string\n    },\n    \"legal notice\": {\n      \"title\": string,\n      \"information\": string\n    }\n  }\n}\n\nexport const dictionaryList = { en, de };","/Users/julianklummer/WebProjects/personal-portfolio/src/themes/Theme.tsx",[],"/Users/julianklummer/WebProjects/personal-portfolio/src/domain/skills/Skills.tsx",[],"/Users/julianklummer/WebProjects/personal-portfolio/src/domain/bottomnav/BottomNav.tsx",[],"/Users/julianklummer/WebProjects/personal-portfolio/src/themes/ThemeHelper.tsx",["70"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { useStyles, getTheme, light, dark } from './Theme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { ThemeContextProvider } from '../contexts/ThemeContext';\n\nexport const ThemeHelper: React.FC = (props) => {\n  const [deviceTheme, setDeviceTheme] = useState('dark');\n  const [theme, setTheme] = useState<'light' | 'dark'>('dark');\n  const [appliedTheme, setAppliedTheme] = useState(getTheme(dark));\n\n  const themeMemo = useMemo(() => ({ theme, setTheme }), [theme, setTheme]);\n\n  const classes = useStyles();\n\n  const deviceLightTheme = useMediaQuery('(prefers-color-scheme: light)');\n  // Default theme mode by device\n  useEffect(() => {\n    if (deviceLightTheme) {\n      setDeviceTheme('light');\n    } else {\n      setDeviceTheme('dark');\n    }\n  });\n\n  // Changes theme mode if device preference changes\n  useEffect(() => {\n    if (deviceTheme === 'light') {\n      setTheme('light');\n    } else {\n      setTheme('dark');\n    }\n  }, [deviceTheme]);\n\n  // Change theme onsite\n  useEffect(() => {\n    if (theme === 'light') {\n      setAppliedTheme(getTheme(light));\n    } else {\n      setAppliedTheme(getTheme(dark));\n    }\n  }, [theme]);\n\n  return (\n    <div className={theme === 'light' ? classes.backgroundLight : classes.backgroundDark}>\n      <ThemeProvider theme={appliedTheme}>\n        <ThemeContextProvider value={themeMemo}>\n          {props.children}\n        </ThemeContextProvider>\n        <CssBaseline />\n      </ThemeProvider>\n    </div>\n  );\n}","/Users/julianklummer/WebProjects/personal-portfolio/src/domain/start/Start.tsx",[],{"ruleId":"71","severity":1,"message":"72","line":6,"column":8,"nodeType":"73","messageId":"74","endLine":6,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":102,"column":3,"nodeType":"73","endLine":102,"endColumn":12,"suggestions":"77"},{"ruleId":"71","severity":1,"message":"78","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":37},{"ruleId":"71","severity":1,"message":"79","line":3,"column":35,"nodeType":"73","messageId":"74","endLine":3,"endColumn":50},{"ruleId":"75","severity":1,"message":"80","line":12,"column":9,"nodeType":"81","endLine":12,"endColumn":23,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":69,"column":14,"nodeType":"73","messageId":"85","endLine":69,"endColumn":29},{"ruleId":"71","severity":1,"message":"86","line":14,"column":7,"nodeType":"73","messageId":"74","endLine":14,"endColumn":24},{"ruleId":"71","severity":1,"message":"87","line":18,"column":7,"nodeType":"73","messageId":"74","endLine":18,"endColumn":26},{"ruleId":"83","severity":1,"message":"88","line":41,"column":14,"nodeType":"73","messageId":"85","endLine":41,"endColumn":44},{"ruleId":"71","severity":1,"message":"89","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"90","line":3,"column":35,"nodeType":"73","messageId":"74","endLine":3,"endColumn":40},{"ruleId":"83","severity":1,"message":"91","line":125,"column":14,"nodeType":"73","messageId":"85","endLine":125,"endColumn":28},{"ruleId":"71","severity":1,"message":"92","line":125,"column":14,"nodeType":"73","messageId":"74","endLine":125,"endColumn":28},{"ruleId":"75","severity":1,"message":"93","line":19,"column":3,"nodeType":"73","endLine":19,"endColumn":12,"suggestions":"94"},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setThemeToggle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [themeContext] as a second argument to the useEffect Hook.",["95"],"'useContext' is defined but never used.","'LanguageContext' is defined but never used.","React Hook useMemo has a missing dependency: 'dictionary'. Either include it or remove the dependency array.","ArrayExpression",["96"],"@typescript-eslint/no-redeclare","'LanguageContext' is already defined.","redeclared","'Checked' is assigned a value but never used.","'Unchecked' is assigned a value but never used.","'SkillCard' is already defined.","'useEffect' is defined but never used.","'Route' is defined but never used.","'dictionaryList' is already defined.","'dictionaryList' is assigned a value but never used.","React Hook useEffect contains a call to 'setDeviceTheme'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [deviceLightTheme] as a second argument to the useEffect Hook.",["97"],{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Add dependencies array: [themeContext]",{"range":"104","text":"105"},"Update the dependencies array to be: [dictionary, userLanguage]",{"range":"106","text":"107"},"Add dependencies array: [deviceLightTheme]",{"range":"108","text":"109"},[3656,3656],", [themeContext]",[475,489],"[dictionary, userLanguage]",[946,946],", [deviceLightTheme]"]